kind: "BuildConfig"
apiVersion: "v1"
metadata:
  name: "sample-pipeline"
spec:
  strategy:
    type: "JenkinsPipeline"
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node('maven') {
           // define commands
           def mvnCmd = "mvn -s configuration/settings.xml"

           stage 'Build'
           git url: 'https://github.com/jacobborella/kitchensink-example.git'
           sh "pwd"
           sh "${mvnCmd} clean install -DskipTests=true"
           def v = version()

           stage 'Test and Analysis'
           parallel (
               'Test': {
                   sh "${mvnCmd} test"
                   step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
               },
               'Static Analysis': {
                   sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                   sh "curl -o sonar-test-result.xml http://sonarqube:9000/api/resources?metrics=qi-quality-index,coverage,test_success_density&resource=1"
                   archiveArtifacts 'sonar-test-result.xml'
               }
           )

           stage 'Push to Nexus'
           sh "${mvnCmd} deploy -DskipTests=true"

           stage 'Deploy TEST'
           sh "rm -rf oc-build && mkdir -p oc-build/deployments"
           sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
           // clean up. keep the image stream
           sh "oc project test"
           sh "oc delete bc,dc,svc,route -l app=tasks -n test"
           // create build. override the exit code since it complains about exising imagestream
           sh "oc new-build --name=kitchensink --image-stream=jboss-eap70-openshift --binary=true --labels=app=kitchensink -n test || true"
           // build image
           sh "oc start-build kitchensink --from-dir=oc-build --wait=true -n test"
           // deploy image
           sh "oc new-app kitchensink:latest -n test"
           sh "oc expose svc/kitchensink -n test"

           stage 'Deploy PROD'
           input message: "Promote to PROD?", ok: "Promote"
           sh "oc project prod"
           // tag for prod
           sh "oc tag test/tasks:latest prod/tasks:${v}"
           // clean up. keep the imagestream
           sh "oc delete bc,dc,svc,route,is -l app=tasks -n prod"
           // deploy prod image
           sh "oc new-app tasks:${v} -n prod"
           sh "oc expose svc/tasks -n prod"
        }
        def version() {
          def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
          matcher ? matcher[0][1] : null
        }

